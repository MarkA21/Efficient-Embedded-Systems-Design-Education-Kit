; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2c.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I.\drivers -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=534 -D_RTE_ -DSTM32F401xE -D_RTE_ --omf_browse=.\objects\i2c.crf drivers\i2c.c]
                          THUMB

                          AREA ||i.i2c_init||, CODE, READONLY, ALIGN=2

                  i2c_init PROC
;;;6      
;;;7      void i2c_init() {
000000  b530              PUSH     {r4,r5,lr}
;;;8      	GPIO_InitTypeDef GPIO_InitStructure;
;;;9      	I2C_InitTypeDef I2C_InitStructure;
;;;10     	
;;;11     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
000002  2101              MOVS     r1,#1
000004  b087              SUB      sp,sp,#0x1c           ;7
000006  0548              LSLS     r0,r1,#21
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;12     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;13     	
;;;14     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
000014  f44f7040          MOV      r0,#0x300
;;;15       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000018  9004              STR      r0,[sp,#0x10]
00001a  2002              MOVS     r0,#2
00001c  f88d0014          STRB     r0,[sp,#0x14]
;;;16       GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000020  2001              MOVS     r0,#1
000022  f88d0016          STRB     r0,[sp,#0x16]
;;;17       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000026  f88d0017          STRB     r0,[sp,#0x17]
;;;18       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
;;;19       GPIO_Init(GPIOB, &GPIO_InitStructure);
00002a  4d17              LDR      r5,|L1.136|
00002c  2400              MOVS     r4,#0                 ;18
00002e  f88d4015          STRB     r4,[sp,#0x15]         ;18
000032  a904              ADD      r1,sp,#0x10
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       GPIO_Init
;;;20       
;;;21     	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
00003a  2204              MOVS     r2,#4
00003c  2108              MOVS     r1,#8
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;22       GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
000044  2204              MOVS     r2,#4
000046  2109              MOVS     r1,#9
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;23     	
;;;24     	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
00004e  f8ad4004          STRH     r4,[sp,#4]
;;;25     	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
000052  f64b70ff          MOV      r0,#0xbfff
000056  f8ad0006          STRH     r0,[sp,#6]
;;;26     	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
00005a  f8ad4008          STRH     r4,[sp,#8]
;;;27     	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
00005e  1528              ASRS     r0,r5,#20
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;28     	I2C_InitStructure.I2C_ClockSpeed = 10000;
000064  f2427010          MOV      r0,#0x2710
;;;29     	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000068  9000              STR      r0,[sp,#0]
00006a  f44f4080          MOV      r0,#0x4000
;;;30     	
;;;31     	I2C_Init(I2C1, &I2C_InitStructure);
00006e  4c07              LDR      r4,|L1.140|
000070  f8ad000c          STRH     r0,[sp,#0xc]          ;29
000074  4669              MOV      r1,sp
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       I2C_Init
;;;32     	I2C_Cmd(I2C1, ENABLE);
00007c  2101              MOVS     r1,#1
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       I2C_Cmd
;;;33     }
000084  b007              ADD      sp,sp,#0x1c
000086  bd30              POP      {r4,r5,pc}
;;;34     
                          ENDP

                  |L1.136|
                          DCD      0x40020400
                  |L1.140|
                          DCD      0x40005400

                          AREA ||i.i2c_read||, CODE, READONLY, ALIGN=2

                  i2c_read PROC
;;;63     
;;;64     void i2c_read(uint8_t address, uint8_t *buffer, int buff_len) {
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;65     	int i=0;
;;;66     	// Read with the following sequence:
;;;67     	//  - Start bit
;;;68     	//  - Contents of buffer, from 0..buff_len, sending a NACK
;;;69     	//    for the last item and an ACK otherwise.
;;;70     	//  - Stop bit
;;;71     	
;;;72     	I2C_GenerateSTART(I2C1, ENABLE);
000004  4c1a              LDR      r4,|L2.112|
000006  4688              MOV      r8,r1                 ;64
000008  4681              MOV      r9,r0                 ;64
00000a  4616              MOV      r6,r2                 ;64
00000c  2500              MOVS     r5,#0                 ;65
00000e  2101              MOVS     r1,#1
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       I2C_GenerateSTART
;;;73     	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
000016  4f17              LDR      r7,|L2.116|
                  |L2.24|
000018  4620              MOV      r0,r4
00001a  4639              MOV      r1,r7
00001c  f7fffffe          BL       I2C_CheckEvent
000020  2800              CMP      r0,#0
000022  d0f9              BEQ      |L2.24|
;;;74     	// Send slave Address for write
;;;75     	I2C_Send7bitAddress(I2C1, address, I2C_Direction_Receiver);
000024  2201              MOVS     r2,#1
000026  4649              MOV      r1,r9
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       I2C_Send7bitAddress
;;;76     	
;;;77     	I2C_AcknowledgeConfig(I2C1, ENABLE);
00002e  2101              MOVS     r1,#1
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       I2C_AcknowledgeConfig
;;;78     	while(i<buff_len-1){
;;;79     		while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
000036  4f0f              LDR      r7,|L2.116|
000038  373f              ADDS     r7,r7,#0x3f
00003a  1e76              SUBS     r6,r6,#1
00003c  e00b              B        |L2.86|
                  |L2.62|
00003e  4639              MOV      r1,r7
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       I2C_CheckEvent
000046  2800              CMP      r0,#0
000048  d0f9              BEQ      |L2.62|
;;;80     		buffer[i] = I2C_ReceiveData(I2C1);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       I2C_ReceiveData
000050  f8080005          STRB     r0,[r8,r5]
000054  1c6d              ADDS     r5,r5,#1
                  |L2.86|
000056  42b5              CMP      r5,r6                 ;78
000058  dbf1              BLT      |L2.62|
;;;81     		i++;
;;;82     	}
;;;83     	
;;;84     	I2C_AcknowledgeConfig(I2C1, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       I2C_AcknowledgeConfig
;;;85     	//while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
;;;86     	//buffer[i]=I2C1->DR;
;;;87     	
;;;88     	I2C_GenerateSTOP(I2C1, ENABLE);
000062  4620              MOV      r0,r4
000064  e8bd47f0          POP      {r4-r10,lr}
000068  2101              MOVS     r1,#1
00006a  f7ffbffe          B.W      I2C_GenerateSTOP
;;;89     }
;;;90     
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x40005400
                  |L2.116|
                          DCD      0x00030001

                          AREA ||i.i2c_write||, CODE, READONLY, ALIGN=2

                  i2c_write PROC
;;;34     
;;;35     void i2c_write(uint8_t address, uint8_t *buffer, int buff_len) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
;;;36     	int i=0;
;;;37     	// Send the following sequence:
;;;38     	//  - Start bit
;;;39     	//  - Contents of buffer, from 0..buff_len
;;;40     	//  - Stop bit
;;;41     	
;;;42     	// wait until I2C1 is not busy anymore
;;;43       while(((I2C1->SR2>>1)&1));
000006  481c              LDR      r0,|L3.120|
000008  4616              MOV      r6,r2                 ;35
00000a  4688              MOV      r8,r1                 ;35
00000c  2400              MOVS     r4,#0                 ;36
                  |L3.14|
00000e  6801              LDR      r1,[r0,#0]
000010  0849              LSRS     r1,r1,#1
000012  07c9              LSLS     r1,r1,#31
000014  d1fb              BNE      |L3.14|
;;;44       // Send I2C1 START condition
;;;45       I2C_GenerateSTART(I2C1, ENABLE);
000016  4d18              LDR      r5,|L3.120|
000018  2101              MOVS     r1,#1
00001a  3d18              SUBS     r5,r5,#0x18
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       I2C_GenerateSTART
;;;46       // wait for I2C1 EV5 --> Slave has acknowledged start condition
;;;47       while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
000022  4f16              LDR      r7,|L3.124|
                  |L3.36|
000024  4628              MOV      r0,r5
000026  4639              MOV      r1,r7
000028  f7fffffe          BL       I2C_CheckEvent
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L3.36|
;;;48     	
;;;49     	// Send slave Address for write
;;;50     	I2C_Send7bitAddress(I2C1, address, I2C_Direction_Transmitter);
000030  2200              MOVS     r2,#0
000032  4649              MOV      r1,r9
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       I2C_Send7bitAddress
;;;51     	//I2C1->DR = address;
;;;52     	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
00003a  4f11              LDR      r7,|L3.128|
                  |L3.60|
00003c  4628              MOV      r0,r5
00003e  4639              MOV      r1,r7
000040  f7fffffe          BL       I2C_CheckEvent
000044  2800              CMP      r0,#0
000046  d0f9              BEQ      |L3.60|
;;;53     	
;;;54     	while(i<buff_len){
;;;55     		I2C_SendData(I2C1, buffer[i]);
;;;56     	  //I2C1->DR = buffer[i];
;;;57     		while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
000048  4f0d              LDR      r7,|L3.128|
00004a  1cbf              ADDS     r7,r7,#2
                  |L3.76|
00004c  42b4              CMP      r4,r6                 ;54
00004e  da0c              BGE      |L3.106|
000050  f8181004          LDRB     r1,[r8,r4]            ;55
000054  4628              MOV      r0,r5                 ;55
000056  f7fffffe          BL       I2C_SendData
                  |L3.90|
00005a  4639              MOV      r1,r7
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       I2C_CheckEvent
000062  2800              CMP      r0,#0
000064  d0f9              BEQ      |L3.90|
000066  1c64              ADDS     r4,r4,#1
;;;58     		i++;
000068  e7f0              B        |L3.76|
                  |L3.106|
;;;59     	}
;;;60     	
;;;61     	I2C_GenerateSTOP(I2C1, ENABLE);	
00006a  4628              MOV      r0,r5
00006c  e8bd47f0          POP      {r4-r10,lr}
000070  2101              MOVS     r1,#1
000072  f7ffbffe          B.W      I2C_GenerateSTOP
;;;62     }
;;;63     
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x40005418
                  |L3.124|
                          DCD      0x00030001
                  |L3.128|
                          DCD      0x00070082

;*** Start embedded assembler ***

#line 1 "drivers\\i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_i2c_init____REV16|
#line 208 "c:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.8.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___5_i2c_c_i2c_init____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_i2c_init____REVSH|
#line 223
|__asm___5_i2c_c_i2c_init____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_i2c_init____RRX|
#line 410
|__asm___5_i2c_c_i2c_init____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
